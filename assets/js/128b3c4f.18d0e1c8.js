"use strict";(self.webpackChunkpterodocs=self.webpackChunkpterodocs||[]).push([[532],{4872:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"egg-advanced/config-parser","title":"Config Parser","description":"Format","source":"@site/docs/egg-advanced/config-parser.md","sourceDirName":"egg-advanced","slug":"/egg-advanced/config-parser","permalink":"/eggdocs/docs/egg-advanced/config-parser","draft":false,"unlisted":false,"editUrl":"https://github.com/Ptero-Egg-Docs/eggdocs/tree/master/docs/egg-advanced/config-parser.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"advancedSidebar","next":{"title":"Overview of Yolks","permalink":"/eggdocs/docs/egg-advanced/docker-image-info"}}');var i=r(4848),t=r(8453);const d={sidebar_position:1},a="Config Parser",o={},c=[{value:"Format",id:"format",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Parser Types",id:"parser-types",level:2}];function l(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"config-parser",children:"Config Parser"})}),"\n",(0,i.jsx)(s.h2,{id:"format",children:"Format"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.strong,{children:"config parser"})," modifies (config) files when a server starts.\nThis ensures that essential server settings are ",(0,i.jsx)(s.strong,{children:"defined"}),", ",(0,i.jsx)(s.strong,{children:"modified"}),", and ",(0,i.jsx)(s.strong,{children:"injected dynamically"})," before the server starts."]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Configuration Parser",src:r(8442).A+"",width:"991",height:"713"})}),"\n",(0,i.jsx)(s.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(s.admonition,{type:"warning",children:(0,i.jsx)(s.p,{children:"Using configuration file parsing is generally an advanced feature. If you are new to creating eggs, you may skip this section unless your egg needs it."})}),"\n",(0,i.jsx)(s.p,{children:"This section allows you to define files that Pterodactyl should automatically modify each time the server starts, to ensure certain settings are always applied. You can provide a JSON object mapping file names to the values that should be set in those files. Wings will then parse and update those files before the server fully starts."}),"\n",(0,i.jsxs)(s.p,{children:["For example, consider a game that uses a ",(0,i.jsx)(s.code,{children:"server.properties"})," file for its settings. You might add a configuration entry like this:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "server.properties": {\n    "parser": "properties",\n    "find": {\n      "server-ip": "0.0.0.0",\n      "server-port": "{{server.build.default.port}}",\n      "max-players": "{{env.MAX_PLAYERS}}"\n    }\n  }\n}\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Each time the server starts, Wings checks if ",(0,i.jsx)(s.code,{children:"server.properties"})," exists:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"If it exists, Wings will update those keys to the defined values (inserting the key if it\u2019s missing)."}),"\n",(0,i.jsx)(s.li,{children:"If the file doesn\u2019t exist, Wings will create it with those keys and values."}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"A more advanced example using a YAML file and wildcards:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-json",children:'{\n  "config.yml": {\n    "parser": "yaml",\n    "find": {\n      "listeners[0].query_enabled": true,\n      "listeners[0].query_port": "{{server.build.default.port}}",\n      "listeners[0].host": "0.0.0.0:{{server.build.default.port}}",\n      "servers.*.address": {\n        "127.0.0.1": "{{config.docker.interface}}",\n        "localhost": "{{config.docker.interface}}"\n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(s.h2,{id:"parser-types",children:"Parser Types"}),"\n",(0,i.jsx)(s.p,{children:"The available Parser Types are:"}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"properties"})}),(0,i.jsxs)(s.td,{children:[(0,i.jsx)(s.code,{children:".properties"})," files with key=value pairs"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"ini"})}),(0,i.jsxs)(s.td,{children:["Supports ",(0,i.jsx)(s.code,{children:"[sections]"})," and ",(0,i.jsx)(s.code,{children:"key=value"})," pairs"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"yaml"})}),(0,i.jsx)(s.td,{children:"Handles nested keys, supports wildcards"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"json"})}),(0,i.jsx)(s.td,{children:"Parses full structure, adds missing keys"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"xml"})}),(0,i.jsx)(s.td,{children:"Can update attributes/values via xpath"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"file"})}),(0,i.jsx)(s.td,{children:"Simple find/replace by line content (avoid if possible)"})]})]})]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8442:(e,s,r)=>{r.d(s,{A:()=>n});const n=r.p+"assets/images/process-management-c88bc181fba4f83af54718f9ddcbe038.png"},8453:(e,s,r)=>{r.d(s,{R:()=>d,x:()=>a});var n=r(6540);const i={},t=n.createContext(i);function d(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);